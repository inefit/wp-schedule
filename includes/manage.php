<?php/** * Author : Budi S * Author URI: http://inef.web.id * License: GPL2 */class dite_schedule_manage{	public $wpdb;		public function __construct() {		global $wpdb;		$this->wpdb = $wpdb;	}			public function manage(){		// Edit screen		$messages = array();		$wp_list_table = new dite_schedule_manage_lists();		// If the user has just made a change to an activity item, build status messages		if ( ! empty( $_REQUEST['deleted'] ) || ! empty( $_REQUEST['spammed'] ) || ! empty( $_REQUEST['unspammed'] ) || ! empty( $_REQUEST['error'] ) || ! empty( $_REQUEST['updated'] ) ) {			$deleted   = ! empty( $_REQUEST['deleted']   ) ? (int) $_REQUEST['deleted']   : 0;			$errors    = ! empty( $_REQUEST['error']     ) ? $_REQUEST['error']           : '';			$spammed   = ! empty( $_REQUEST['spammed']   ) ? (int) $_REQUEST['spammed']   : 0;			$unspammed = ! empty( $_REQUEST['unspammed'] ) ? (int) $_REQUEST['unspammed'] : 0;			$updated   = ! empty( $_REQUEST['updated']   ) ? (int) $_REQUEST['updated']   : 0;			$errors = array_map( 'absint', explode( ',', $errors ) );			// Make sure we don't get any empty values in $errors			for ( $i = 0, $errors_count = count( $errors ); $i < $errors_count; $i++ ) {				if ( 0 === $errors[$i] )					unset( $errors[$i] );			}			if ( $updated > 0 )				$messages[] = __( 'User has been updated succesfully.', 'project-status' );		}		?>		<div class="wrap">			<?php screen_icon( 'post' ); ?>			<h2>				Schedule Lists <a href="<?php printf("?page=%s&action=add",$_GET['page']) ?>" class="add-new-h2">Add New</a>			</h2>			<?php // If the user has just made a change to an activity item, display the status messages ?>			<?php if ( !empty( $messages ) ) : ?>				<div id="moderated" class="<?php echo ( ! empty( $_REQUEST['error'] ) ) ? 'error' : 'updated'; ?>"><p><?php echo implode( "<br/>\n", $messages ); ?></p></div>			<?php endif; ?>						<form id="my-dev-form" action="" method="get">				<?php $wp_list_table->search_box( __( 'Search all Users' ), 'project-status' ); ?>				<input type="hidden" name="page" value="<?php echo esc_attr( $plugin_page ); ?>" />				<?php $wp_list_table->prepare_items(); ?>				<?php $wp_list_table->display(); ?>			</form>					</div>		<?php	}		public function meta_edit(){		?>		<div class="submitbox" id="submitcomment">			<div id="minor-publishing">				<div class="clear"></div>			</div><!-- #minor-publishing -->			<div id="major-publishing-actions">				<div id="publishing-action">					<?php submit_button( __( 'Update' ), 'primary', 'save', false, array( 'tabindex' => '4' ) ); ?>				</div>				<div class="clear"></div>			</div><!-- #major-publishing-actions -->		</div><!-- #submitcomment -->		<?php	}		public function edit(){		$user_id = $_GET['id'];		$user_info = get_userdata($user_id);		$dev_firstname = get_user_meta($user_id, 'first_name',true); 		$dev_lastname = get_user_meta($user_id, 'last_name',true); 		$dev_email = $user_info->user_email; 		$dev_login = $user_info->user_login; 		?>		<div class="wrap">			<?php screen_icon( 'post' ); ?>			<h2> <?php echo __( ucfirst($_GET['action']).' User Scheduler' ); ?> </h2>			<?php if(($_GET['action'] == 'edit' && $user_info )||$_GET['action'] == 'add'): ?>				<?php echo ''; ?>			<?php else : echo 'No user selected';				endif; ?>		</div>		<?php	}		public function post_user($action){		if($_POST){			if ( username_exists( $_POST['dev_login'] ) && $action == 'add' ){				?>					<div class="error">This username is already registered. Please choose another one.</div>				<?php			}			else if(is_email( $_POST['dev_email'] )){				if($action == 'add'){					$user_data = array(						'ID' => '',						'user_pass' => wp_generate_password(),						'user_login' => $_POST['dev_login'],						'display_name' => $_POST['dev_login'],						'first_name' => $_POST['dev_firstname'],						'last_name' => $_POST['dev_lastname'],						'role' => 'subscriber'					);					$user_id = wp_insert_user( $user_data );					wp_set_password('user', $user_id);				}				else{					$user_id = $_POST['user_id'];				}								update_user_meta( $user_id, 'first_name', $_POST['dev_firstname'] );				update_user_meta( $user_id, 'last_name', $_POST['dev_lastname'] );				update_user_meta( $user_id, 'dite_scheduler', '1' );				wp_update_user( array ('ID' => $user_id, 'user_email' => $_POST['dev_email']) ) ;				echo '<script type="text/javascript">window.location = "?page='.$_GET['page'].'&id='.$user_id.'&updated='.$user_id.'";</script>';			}			else{				?>				<div class="error">  					<p>Email not valid</p>				</div>				<?php			}		}	}}$dite_appointment = new dite_schedule_manage;/** * List table class for the Activity component admin page. * */if(!class_exists('WP_List_Table')) :    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');endif;class dite_schedule_manage_lists extends WP_List_Table {	/**	 * What type of view is being displayed? e.g. "All", "Pending", "Approved", "Spam"...	 *	*/	public $view = 'all';	/**	 * Store User ID	 *	 */	protected $user_id;	/**	 * Constructor	 *	 */	public function __construct() {		// Define singular and plural labels, as well as whether we support AJAX.		parent::__construct( array(			'ajax'     => false,			'plural'   => 'Users',			'singular' => 'User',		) );	}		/**	 * Add extra markup in the toolbars before or after the list	 * @param string $which, helps you decide if you add the markup after (bottom) or before (top) the list	 */	function extra_tablenav( $which ) {		if ( $which == "top" ){				}		if ( $which == "bottom" ){				}	}		/**	 * Define the columns that are going to be used in the table	 * @return array $columns, the array of columns to use with the table	 */	function get_columns() {		return $columns= array(			'cb'  => '<input type="checkbox" />',			'start_time'=>__('Start Date'),			'end_time'=>__('End Date'),			'status'=>__('Type'),			'post_title'=>__('Title'),		);	}		public function get_sortable_columns() {		$sortable_columns = array(            'start_time'     => array('start_time',true),     //true means its already sorted            'end_time'    => array('end_time',false),            'post_title'    => array('post_title',false),            'status'  => array('status',false)        );        return $sortable_columns;	}			function process_bulk_action() {                //Detect when a bulk action is being triggered...        if( 'delete'===$this->current_action() ) {            wp_die('Items deleted (or they would be if we had items to delete)!');        }            }			function column_start_time($item){                //Build row actions        $actions = array(            'Edit'      => sprintf('<a href="?page=%s&action=%s&id=%s">Edit</a>',$_REQUEST['page'],'edit',$item['post_id']),            'Delete Data'      => sprintf('<a href="?page=%s&action=%s&id=%s">Delete data</a>',$_REQUEST['page'],'delete',$item['post_id']),			            'Create as Free Time'      => sprintf('<a href="?page=%s&action=%s&id=%s">Create as Free Time</a>',$_REQUEST['page'],'free_Time',$item['post_id'])        );                //Return the title contents        return sprintf('%1$s <span style="color:silver">(id:%2$s)</span>%3$s',            /*$1%s*/ $item['start_time'],            /*$2%s*/ $item['post_id'],            /*$3%s*/ $this->row_actions($actions)        );    }		function column_cb($item){        return sprintf(            '<input type="checkbox" name="%1$s[]" value="%2$s" />',            /*$1%s*/ $this->_args['singular'],  //Let's simply repurpose the table's singular label ("movie")            /*$2%s*/ $item['post_id']                //The value of the checkbox should be the record's id        );    }		function column_default($item, $column_name){        switch($column_name){            case 'post_id':            case 'start_time':            case 'end_time':            case 'post_title':            case 'status':                return $item[$column_name];            default:                return print_r($item,true); //Show the whole array for troubleshooting purposes        }    }		function get_bulk_actions() {        $actions = array(            'delete'    => 'Delete',            'flag_freetime'    => 'Flag as Free Time'        );        return $actions;    }			/**	 * Prepare the table with different parameters, pagination, columns and table elements	 */	function prepare_items() {		global $wpdb, $_wp_column_headers;		$screen = get_current_screen();		/* -- Preparing your query -- */				/** Get data dev from usermeta */		$data = array();		$user_query = $wpdb->prepare("SELECT * FROM ".$wpdb->prefix."dite_appointment");		$data = $wpdb->get_results($user_query,ARRAY_A);				/* -- Ordering parameters -- */		//Parameters that are going to be used to order the result		$orderby = !empty($_GET["orderby"]) ? mysql_real_escape_string($_GET["orderby"]) : 'ASC';		$order = !empty($_GET["order"]) ? mysql_real_escape_string($_GET["order"]) : '';		if(!empty($orderby) & !empty($order)){ $query.=' ORDER BY '.$orderby.' '.$order; }		$per_page = 8;        $columns = $this->get_columns();        $hidden = array();        $sortable = $this->get_sortable_columns();		        $this->_column_headers = array($columns, $hidden, $sortable);                        /**         * Optional. You can handle your bulk actions however you see fit. In this         * case, we'll handle them within our package just to keep things clean.         */        $this->process_bulk_action();		        //$data = $wpdb->get_results($query,ARRAY_A);                        $current_page = $this->get_pagenum();        $total_items = count($data);		        $data = array_slice($data,(($current_page-1)*$per_page),$per_page);		        $this->items = $data;                        /**         * REQUIRED. We also have to register our pagination options & calculations.         */        $this->set_pagination_args( array(            'total_items' => $total_items,                  //WE have to calculate the total number of items            'per_page'    => $per_page,                     //WE have to determine how many items to show on a page            'total_pages' => ceil($total_items/$per_page)   //WE have to calculate the total number of pages        ) );    }}?>